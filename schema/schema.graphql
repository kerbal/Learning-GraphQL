type Query {
  me: User!
  post: Post!
  posts: [Post!]!
  users(Name: String): [User!]!
  user(Id: ID!): User!
  comments: [Comment!]!
}

type Mutation {
  createUser(data: CreateUserInput): User!
  createPost(data: CreatePostInput): Post!
  createComment(data: CreateCommentInput): Comment!
  updatePost(data: UpdatePostInput): Post!
  deletePost(Id: ID!): Post
  updateComment(data: UpdateCommentInput): Comment!
  deleteComment(I: ID!): Comment
}

type Subscription {
  count: Int!
  comment(PostId: ID!): Comment!
  post: PostSubscriptionPayload!
}

type PostSubscriptionPayload {
  mutation: String!
  data: Post!
}

type CommentSubscriptionPayload {
  mutation: String!
  data: Comment!
}

type User {
  Id: ID!
  Name: String!
  Email: String!
  Age: Int
  Posts: [Post!]!
  Comments: [Comment!]!
}

type Post {
  Id: ID!
  Title: String!
  Body: String!
  Published : Boolean!
  Author: User!
  Comments: [Comment!]!
}

type Comment {
  Id: ID!
  Body: String!
  UserId: ID!
  PostId: ID!
  Username: String
}

input CreateUserInput {
  Username: String!
  Name: String!
  Email: String! 
  Age: Int!
  Gender: String!
}

input CreatePostInput {
  Title: String!
  Body: String!
  Published: Boolean!
  AuthorId: ID!
}

input CreateCommentInput {
  Content: String!
  UserId: ID!
  PostId: ID!
}

input UpdatePostInput {
  Id: ID!
  Title: String
  Body: String
  Published: Boolean
}

input UpdateCommentInput {
  Id: ID!
  Content: String!
}